/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ecometrica.Views;

import javax.swing.DefaultComboBoxModel;
import Ecometrica.econ.*;
import Pojos.CountryData;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author nickpsal
 */
public class InsertDataGUI extends javax.swing.JFrame {
    /**
     * Creates new form InsertDataGUI
     */
    //Πίνακες που θα αποθηκευτόυν τα Ονόματα και οι κωδικοι των χωρών
    private String[] countries = new String[240];
    private String[] codes = new String[240];
    
    //λίστες για να αποθηκεύονται τα δεδομένα GDP OIL
    List<CountryData> GDPdata = new ArrayList();
    List<CountryData> OILdata = new ArrayList();
    //κωδικας χώρας που επιλέχθηκε απο το Combobox
    private String countryCode;
    int choise;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    //api key
    private final String key = "xt8bLEyhssQMhYbri3_C";
    private Date StartDateGDP;
    private Date EndDateGDP;
    private String NameGDP;
    private Date StartDateOIL;
    private Date EndDateOIL;
    private String NameOIL;
    private String Desc;    
    //Μεταβλητες για να ελεγχουν αν βρήκα ή οχι δεδομενα για GDP και OIL
    private boolean OILData;
    private boolean GDPData;
    //Μεταβλητές για την Μπάρα Φόρτωσης    
    private Timer timer;
    private final int MAX_VAL = 100;
    
    public InsertDataGUI() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("ΕΜΦΑΝΙΣΗ ΟΙΚΟΝΟΜΙΚΩΝ ΣΤΟΙΧΕΩΝ");
        this.setSize(920, 670);
        this.setMinimumSize(new Dimension(920,670));
        //this.setResizable(false);
        // Εισαγωγή Ονομάτων Χωρών στο ComboBox απο το αρχειο csv
        csvImport insert = new csvImport();
        countries = insert.importCountryNames();
        codes = insert.importCountryCodes();
        //Δημιουργια Πίνακα με όνοματα χώρας και Πίνακα με
        //κωδικο κάθε χώρας
        jComboBox1.setModel(new DefaultComboBoxModel<>(countries));    
        //Αρχικοποίηση ετικετών για τα Όνοματα των Χωρών που επιλέγουμε
        oilCountry.setText("");
        gdpCountry.setText("");
        //Απενεργοποίηση Ετικέτα προειδοποίησης οτι τα δεδομένα της χώρας
        //εινια αποθηκευμένα στην  βάση δεδομένων
        dbcheckLabel.setVisible(false);
        dbCheckBox.setVisible(false);
        //Απενεργοποίηση κουμπιού δημιουργίας διαγράματος
        draftBtn.setEnabled(false);
        //Απενεργοποίηση κουμπιού αποθήκευσης
        savetoDB.setEnabled(false);
        progBar.setVisible(false);
        loadDataLabel.setVisible(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        fetchBtn = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        oilCountry = new javax.swing.JLabel();
        gdpCountry = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        startDateOil = new javax.swing.JLabel();
        endDateOil = new javax.swing.JLabel();
        endDateGdp = new javax.swing.JLabel();
        startDateGdp = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gdpTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        oilTable = new javax.swing.JTable();
        dbcheckLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        savetoDB = new javax.swing.JButton();
        draftBtn = new javax.swing.JButton();
        deleteAllBtn = new javax.swing.JButton();
        dbCheckBox = new javax.swing.JCheckBox();
        progBar = new javax.swing.JProgressBar();
        loadDataLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 102, 0));

        jComboBox1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        fetchBtn.setText("ΛΗΨΗ ΔΕΔΟΜΕΝΩΝ");
        fetchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchBtnActionPerformed(evt);
            }
        });

        panel.setBackground(new java.awt.Color(102, 102, 0));

        jPanel2.setBackground(new java.awt.Color(102, 102, 0));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ΔΕΔΟΜΕΝΑ ΓΙΑ OIL ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ΟΝΟΜΑ ΣΕΤ ΔΕΔΟΜΕΝΩΝ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ΟΝΟΜΑ ΣΕΤ ΔΕΔΟΜΕΝΩΝ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 133, 0, 0);
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("ΔΕΔΟΜΕΝΑ ΓΙΑ GDP ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 133, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);

        oilCountry.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        oilCountry.setForeground(new java.awt.Color(255, 255, 255));
        oilCountry.setText("jLabel6");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(oilCountry, gridBagConstraints);

        gdpCountry.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gdpCountry.setForeground(new java.awt.Color(255, 255, 255));
        gdpCountry.setText("jLabel7");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 134, 0, 0);
        jPanel2.add(gdpCountry, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("ΔΙΑΘΕΣΙΜΕΣ ΗΜΕΡΟΜΗΝΙΕΣ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 6, 0, 0);
        jPanel2.add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("ΔΙΑΘΕΣΙΜΕΣ ΗΜΕΡΟΜΗΝΙΕΣ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 133, 0, 0);
        jPanel2.add(jLabel7, gridBagConstraints);

        startDateOil.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        startDateOil.setForeground(new java.awt.Color(255, 255, 255));
        startDateOil.setText("ΗΜΕΡΟΜΗΝΙΑ ΕΚΚΙΝΗΣΗΣ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        jPanel2.add(startDateOil, gridBagConstraints);

        endDateOil.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        endDateOil.setForeground(new java.awt.Color(255, 255, 255));
        endDateOil.setText("ΤΕΛΕΥΤΑΙΑ ΗΜΕΡΟΜΗΝΙΑ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 0);
        jPanel2.add(endDateOil, gridBagConstraints);

        endDateGdp.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        endDateGdp.setForeground(new java.awt.Color(255, 255, 255));
        endDateGdp.setText("ΤΕΛΕΥΤΑΙΑ ΗΜΕΡΟΜΗΝΙΑ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 133, 0, 0);
        jPanel2.add(endDateGdp, gridBagConstraints);

        startDateGdp.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        startDateGdp.setForeground(new java.awt.Color(255, 255, 255));
        startDateGdp.setText("ΗΜΕΡΟΜΗΝΙΑ ΕΚΚΙΝΗΣΗΣ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 133, 0, 0);
        jPanel2.add(startDateGdp, gridBagConstraints);

        gdpTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ΕΤΟΣ", "ΤΙΜΗ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(gdpTable);
        if (gdpTable.getColumnModel().getColumnCount() > 0) {
            gdpTable.getColumnModel().getColumn(0).setResizable(false);
            gdpTable.getColumnModel().getColumn(1).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.ipady = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 133, 0, 57);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        oilTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ΕΤΟΣ", "ΤΙΜΗ"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        oilTable.setDoubleBuffered(true);
        oilTable.setDropMode(javax.swing.DropMode.ON_OR_INSERT_ROWS);
        jScrollPane2.setViewportView(oilTable);
        if (oilTable.getColumnModel().getColumnCount() > 0) {
            oilTable.getColumnModel().getColumn(0).setResizable(false);
            oilTable.getColumnModel().getColumn(1).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 350;
        gridBagConstraints.ipady = 250;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 0);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        dbcheckLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        dbcheckLabel.setForeground(new java.awt.Color(255, 255, 255));
        dbcheckLabel.setText("ΗΔΗ ΑΠΟΘΗΚΕΥΜΕΝΟ ΣΤΗΝ ΒΑΣΗ ΔΕΔΟΜΕΝΩΝ");

        jPanel3.setBackground(new java.awt.Color(102, 102, 0));

        savetoDB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ecometrica/Views/images/Save-icon.png"))); // NOI18N
        savetoDB.setText("ΑΠΟΘΗΚΕΥΣΗ ΣΤΗΝ ΒΑΣΗ ΔΕΔΟΜΕΝΩΝ");
        savetoDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savetoDBActionPerformed(evt);
            }
        });

        draftBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ecometrica/Views/images/chart_XY-64.png"))); // NOI18N
        draftBtn.setText("ΣΧΕΔΙΑΣΜΟΣ ΓΡΑΦΗΜΑΤΟΣ");
        draftBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                draftBtnActionPerformed(evt);
            }
        });

        deleteAllBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Ecometrica/Views/images/delete.jpg"))); // NOI18N
        deleteAllBtn.setText("ΔΙΑΓΡΑΦΗ ΟΛΩΝ");
        deleteAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(savetoDB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(draftBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(deleteAllBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(savetoDB, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(draftBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(deleteAllBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        dbCheckBox.setSelected(true);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dbCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dbcheckLabel)
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbcheckLabel)
                    .addComponent(dbCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        loadDataLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        loadDataLabel.setForeground(new java.awt.Color(255, 255, 255));
        loadDataLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        loadDataLabel.setText("jLabel8");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fetchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(loadDataLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(progBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(loadDataLabel)
                    .addComponent(progBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fetchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(jComboBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //Κλείσιμο Παραθύρου και άνοιγμα νεου παραθύρου
        this.dispose();
        new MainFrame().setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void fetchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchBtnActionPerformed
        //Αρχικοποίηση Πίνακα εμφάνισης δεδομένων ή καθαρισμός του Πίνακα
        //σε πρίπτωση που είχαμε ξανακάνει πριν αναζήτηση
        EmptyTable();
        // choise είναι το index του combobox.
        // Αν είναι 0 είναι η πρώτη επιλογή του Combobox που είναι ανενεργή 
        if (choise !=0) {
            DataDB db = new DataDB();
            boolean conn = db.TestConnection();
               //Ελεγχος αν ειναι δυνατή η Συνδεση με την Βαση Δεδομένων
               if (!conn) {
                JOptionPane.showMessageDialog(panel, "ΑΔΥΝΑΤΗ ΣΕΝΔΕΣΗ ΣΤΗΝ ΒΑΣΗ ΔΕΔΟΜΕΝΩΝ",
                        "ΣΦΑΛΜΑ", JOptionPane.INFORMATION_MESSAGE);
            }
            //Εμφάνίση ενδειξης προοδου
            progBar.setVisible(true);
            progBar.setStringPainted(true);
            progBar.setValue(0);
            timer = new Timer(35, new InsertDataGUI.UpdateBarListener());
            timer.start();
            loadDataLabel.setText("ΦΟΡΤΩΣΗ ΔΕΔΟΜΕΝΩΝ");
            loadDataLabel.setVisible(true);
            // Ελεγχος αν υπάρχουν τα δεδομένα της χώρας ήδη στην ΒΔ
            // Επιστρέφει false αν δεν υπάρχουν
            boolean succ = db.checkCountryData(countryCode);
            if (succ) {
                // GDP δεδομένα
                savetoDB.setEnabled(true);
                //Καλούμε το api για να παρουμε τα δεδομένα απο την σελίδα
                restApi api = new restApi(countryCode, key);
                String url1 = "https://www.quandl.com/api/v3/datasets/WWDI/";
                String url2 = "https://www.quandl.com/api/v3/datasets/BP/OIL_CONSUM_";
                String responseGDP = api.getDataGDP(url1);
                String responseBP = api.getDataBP(url2);
                //Εκτύπωση δεδομένων σε περίπτωση που υπάρχουν δεδομένα
                ShowDataGDP(responseGDP);
                ShowDataOIL(responseBP);
            } else {
                //Τα δεδομένα της χώρας ελιναι ηδη αποθηκευμλενα στην ΒΔ
                JOptionPane.showMessageDialog(panel, "ΗΔΗ ΑΠΟΘΗΚΕΥΜΕΝΗ ΣΤΗΝ ΒΑΣΗ ΔΕΔΟΜΕΝΩΝ ΘΑ ΧΡΗΣΙΜΟΠΟΙΗΣΟΥΜΕ ΤΑ ΑΠΟΘΗΚΕΥΜΕΝΑ ΔΕΔΟΜΕΝΑ",
                        "ΠΡΟΣΟΧΗ", JOptionPane.INFORMATION_MESSAGE);        
                dbcheckLabel.setVisible(true);
                dbCheckBox.setVisible(true);
                draftBtn.setEnabled(true);
                savetoDB.setEnabled(false);
                //Παίρνουμε της Ημερομηνίες απο την Βάση Δεδομένων
                ArrayList<String> datesGDP = db.getDatesGDP(countryCode, String.valueOf(jComboBox1.getSelectedItem()));
                ArrayList<String> datesOIL = db.getDateOIL(countryCode, String.valueOf(jComboBox1.getSelectedItem()));
                GDPdata = db.getDataGDP(countryCode, String.valueOf(jComboBox1.getSelectedItem()));
                OILdata = db.getDataOIL(countryCode, String.valueOf(jComboBox1.getSelectedItem()));
                //Εμφάνιση των δεδομένων στο γραφικό Περιβάλλον
                //Εκτύπωση Ημερομηνίας Πρώτης και Τελευταίας Μέτρησης Χώρας
                ShowDatesGDP(datesGDP);
                ShowDatesOIL(datesOIL);
                //Γεμίζουμε τον Πίνακα με τα δεδομένα GDP και OIL
                fillTableGDP();
                fillTableOIL();
            }
            loadDataLabel.setText("ΦΟΡΤΩΣΗ ΟΛΟΚΛΗΡΩΘΗΚΕ");
        } else {
            dbcheckLabel.setEnabled(false);
            JOptionPane.showMessageDialog(panel, "ΔΕΝ ΕΠΙΛΈΞΑΤΕ ΚΑΠΟΙΑ ΧΩΡΑ ΠΟΑ ΤΗΝ ΛΙΣΤΑ",
                    "ΠΡΟΣΟΧΗ", JOptionPane.INFORMATION_MESSAGE);
        }      
    }//GEN-LAST:event_fetchBtnActionPerformed
    private class UpdateBarListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            int val = progBar.getValue();
            if (val >= MAX_VAL) {
                timer.stop();
                return;
            }
            val +=10;
            progBar.setValue(val);
        }
    }
    
    private void ShowDataGDP(String responseGDP) {
        if (responseGDP != null) {
            //Αν η μεταβλητή respnseGDP δεν είναι αδεία 
            //δλδ υπάρχουν δεδομένα καλούμε τις κλάσεις 
            //της JSONdata για να πάρουμε τα δεδομένα
            JSONdata jdata = new JSONdata();
            StartDateGDP = jdata.dataGDPGetStartDate(responseGDP);
            EndDateGDP = jdata.dataGDPGetNewestDate(responseGDP);
            startDateGdp.setText("ΗΜΕΡΟΜΗΝΙΑ ΕΚΚΙΝΗΣΗΣ " + " " + sdf.format(StartDateGDP));
            endDateGdp.setText("ΤΕΛΕΥΤΑΙΑ ΗΜΕΡΟΜΗΝΙΑ " + " " + sdf.format(EndDateGDP));
            NameGDP = "GDP (Current LCU) for " + jComboBox1.getSelectedItem();
            GDPdata = jdata.getGDPdata(responseGDP);
            fillTableGDP();
            GDPData = true;
            dbcheckLabel.setVisible(false);
            draftBtn.setEnabled(true);
            savetoDB.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(panel, "ΔΕΝ ΒΡΕΘΗΚΑΝ ΔΕΔΟΜΈΝΑ GDP ΓΙΑ ΤΗΝ ΣΥΓΚΕΚΡΙΜΕΝΗ ΧΩΡΑ",
                    "ΣΦΑΛΜΑ", JOptionPane.INFORMATION_MESSAGE);
            draftBtn.setEnabled(false);
            dbcheckLabel.setEnabled(false);
            savetoDB.setEnabled(false);
            GDPData = false;
        }
    }
    
    private void ShowDataOIL(String responseBP) {
        if (responseBP != null) {
            //Αν η μεταβλητή respnseBP δεν είναι αδεία 
            //δλδ υπάρχουν δεδομένα καλούμε τις κλάσεις 
            //της JSONdata για να πάρουμε τα δεδομένα
            JSONdata jdata = new JSONdata();
            StartDateOIL = jdata.dataOILGetStartDate(responseBP);
            EndDateOIL = jdata.dataOILGetNewestDate(responseBP);
            startDateOil.setText("ΗΜΕΡΟΜΗΝΙΑ ΕΚΚΙΝΗΣΗΣ " + " " + sdf.format(StartDateOIL));
            endDateOil.setText("ΤΕΛΕΥΤΑΙΑ ΗΜΕΡΟΜΗΝΙΑ " + " " + sdf.format(EndDateOIL));
            NameOIL = "Oil Consumption - " + jComboBox1.getSelectedItem();
            Desc = "Oil Consumption - " + jComboBox1.getSelectedItem() + ". Million tonnes.";
            //Εκτύπωση δεδομένων σε περίπτωση που υπάρχουν δεδομένα
            OILdata = jdata.getOILdata(responseBP);
            fillTableOIL();
            OILData = true;
        } else {
            JOptionPane.showMessageDialog(panel, "ΔΕΝ ΒΡΕΘΗΚΑΝ ΔΕΔΟΜΈΝΑ OIL ΓΙΑ ΤΗΝ ΣΥΓΚΕΚΡΙΜΕΝΗ ΧΩΡΑ",
                    "ΣΦΑΛΜΑ", JOptionPane.INFORMATION_MESSAGE);
            OILData = false;
        }
    }
    
    private void EmptyTable() {
        //Καθαρισμος των 2 πινακων
        DefaultTableModel tm1 = (DefaultTableModel) gdpTable.getModel();
        DefaultTableModel tm2 = (DefaultTableModel) oilTable.getModel();
        //Καθαρισμος Πίνακα GDP
        if (gdpTable.getRowCount() !=0) {
            for (int i = 0; i< gdpTable.getRowCount()-1; i++) {
                tm1.removeRow(i);
            }
        }
        //Καθαρισμός Πίνακα BP OIL
        if (oilTable.getRowCount() !=0) {
            for (int i = 0; i< oilTable.getRowCount()-1; i++) {
                tm2.removeRow(i);
            }
        }
    }
    
    private void fillTableGDP() {
        //Δημιουργία model για τον Πίνακα
        DefaultTableModel tm1 = (DefaultTableModel) gdpTable.getModel();
        for (int i = 0; i < GDPdata.size(); i++) {
            //Παιρνάμε τιμές στον Πίνακα
            Object[] row1 = {
                GDPdata.get(i).getDataYear(),
                GDPdata.get(i).getValue()
            };
            tm1.addRow(row1);
        }
    }
    
    private void fillTableOIL() {
        //Δημιουργία model για τον Πίνακα
        DefaultTableModel tm2 = (DefaultTableModel) oilTable.getModel();
        for (int i = 0; i < OILdata.size(); i++) {
            //Παιρνάμε τιμές στον Πίνακα
            Object[] row2 = {
                OILdata.get(i).getDataYear(),
                OILdata.get(i).getValue()
            };
            tm2.addRow(row2);
        }
    }
    
    private void ShowDatesGDP(ArrayList<String> datesGDP) {
        if (!datesGDP.isEmpty()) {
            //Αν η λίστα με τις ημερομηνίες δεν είναι αδεια εμφανίζει τα δεδομένα
            String startDateGDP = "ΗΜΕΡΟΜΗΝΙΑ ΕΚΚΙΝΗΣΗΣ " + " " + datesGDP.get(0) + "-12-31";
            String endDateGDP = "ΤΕΛΕΥΤΑΙΑ ΗΜΕΡΟΜΗΝΙΑ " + " " + datesGDP.get(1) + "-12-31";
            startDateGdp.setText(startDateGDP);
            endDateGdp.setText(endDateGDP);
        }
    }
    
    private void ShowDatesOIL(ArrayList<String> datesOIL) {
        if (!datesOIL.isEmpty()) {
            //Αν η λίστα με τις ημερομηνίες δεν είναι αδεια εμφανίζει τα δεδομένα
            String startDateOIL = "ΗΜΕΡΟΜΗΝΙΑ ΕΚΚΙΝΗΣΗΣ " + " " + datesOIL.get(0) + "-12-31";
            String endDateOIL = "ΤΕΛΕΥΤΑΙΑ ΗΜΕΡΟΜΗΝΙΑ " + " " + datesOIL.get(1) + "-12-31";
            startDateOil.setText(startDateOIL);
            endDateOil.setText(endDateOIL);
        }
    }
        
    private void draftBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_draftBtnActionPerformed
        //Εμφάνιση γραφήματος
        String title = "ΔΙΑΓΡΑΜΜΑ ΟΙΚΟΝΟΜΙΚΩΝ ΣΤΟΙΧΕΙΩΝ GDP ΚΑΙ BP OIL ΓΙΑ ΤΗΝ ΧΩΡΑ " + jComboBox1.getSelectedItem();
        final DualAxis demo = new DualAxis(title, GDPdata, OILdata);
        demo.pack();
        RefineryUtilities.centerFrameOnScreen(demo);
        demo.setVisible(true);
    }//GEN-LAST:event_draftBtnActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        //Οταν επιλέγουμε μια χώρα απο το Combobox αποθηκέυουμε τον Κωδικό χώρας
        //στην countryCode και εμφάνισης του ονόματος χώρας στο Γραφικό Περιβάλλον
        choise = jComboBox1.getSelectedIndex();
        if (choise !=0) {
            countryCode = codes[choise];
            System.out.println(codes[choise]);
            String CountryGDP = "GDP (Current LCU) - " + String.valueOf(jComboBox1.getSelectedItem());
            String CountryOIL = "OIL Consumption - " + String.valueOf(jComboBox1.getSelectedItem());
            oilCountry.setText(CountryOIL);
            gdpCountry.setText(CountryGDP);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void deleteAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllBtnActionPerformed
        //Επιβαιβαίωση διαγραφής δεδομένων
        int result = JOptionPane.showConfirmDialog(null,
                "ΕΙΣΤΕ ΣΙΓΟΥΡΟΙ ΘΕΛΕΤΕ ΝΑ ΔΙΑΓΡΑΨΕΤΕ ΟΛΑ ΤΑ ΔΕΔΟΜΕΝΑ ΑΠΟ ΤΗΝ ΒΑΣΗ ΔΕΔΟΜΕΝΩΝ???", null, JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            DataDB delete = new DataDB();
            boolean succ = delete.emptyDB();
            if (!succ) {
                 JOptionPane.showMessageDialog(panel, "ΣΦΑΛΜΑ ΣΥΝΔΕΣΗΣ ΣΤΗΝ ΒΑΣΗ ΔΕΔΟΜΕΝΩΝ",
						"ΣΦΑΛΜΑ", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteAllBtnActionPerformed

    private void savetoDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savetoDBActionPerformed
        //Αποθήκευση Δεδομένων στην ΒΔ
        DataDB db = new DataDB();
        boolean succ = db.InsertCountryData(countries,codes, choise);
        //Εισαγωγή Δεδομένων στον Πίνακα Country
        if (!succ){
            JOptionPane.showMessageDialog(panel, "ΑΔΥΝΑΤΗ Η ΑΠΟΘΗΚΕΥΣΗ ΣΤΗΝ ΒΑΣΗ ΔΕΔΟΜΕΝΩΝ",
						"ΣΦΑΛΜΑ", JOptionPane.INFORMATION_MESSAGE);
        }
        //Εισαγωγή Δεδομένων στον Πίνακα Country_Dataset για τα δεδομένα GDP
        succ = db.InsertDatasetGDP(StartDateGDP, EndDateGDP, NameGDP);
        if (!succ){
            JOptionPane.showMessageDialog(panel, "Αδύνατη η αποθήκευση δεδομένων στον Πίνακα COUNTRY_DATASET για GDP (Πρωην LCU) στην Βάση Δεδομένων",
						"ΣΦΑΛΜΑ", JOptionPane.INFORMATION_MESSAGE);
        }
        //Εισαγωγή Δεδομένων στον Πίνακα Country_Dataset για τα δεδομένα OIL
        succ = db.InsertDatasetOIL(StartDateOIL, EndDateOIL, NameOIL,Desc);
        if (!succ){
            JOptionPane.showMessageDialog(panel, "Αδύνατη η αποθήκευση δεδομένων στον Πίνακα COUNTRY_DATASET για OIL Concumption στην Βάση Δεδομένων",
						"ΣΦΑΛΜΑ", JOptionPane.INFORMATION_MESSAGE);
        }
        //Εισαγωγή Δεδομένων στον Πίνακα Country_Data για τα δεδομένα GDP
        if (GDPData) {
            boolean savedGDP = db.InsertCountryDataGDP(GDPdata);
            if (!savedGDP){
            JOptionPane.showMessageDialog(panel, "Αδύνατη η αποθήκευση δεδομένων GDP (Πρωην LCU) στην Βάση Δεδομένων",
						"ΣΦΑΛΜΑ", JOptionPane.INFORMATION_MESSAGE);
            }
        }
        //Εισαγωγή Δεδομένων στον Πίνακα Country_Data για τα δεδομένα OIL
        if (OILData) {
            boolean savedOIL = db.InsertCountryDataOIL(OILdata);
            if (!savedOIL){
            JOptionPane.showMessageDialog(panel, "Αδύνατη η αποθήκευση δεδομένων OIL Concumption στην Βάση Δεδομένων",
						"ΣΦΑΛΜΑ", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_savetoDBActionPerformed


    /**
     * @param args the command line arguments
     */    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox dbCheckBox;
    private javax.swing.JLabel dbcheckLabel;
    private javax.swing.JButton deleteAllBtn;
    private javax.swing.JButton draftBtn;
    private javax.swing.JLabel endDateGdp;
    private javax.swing.JLabel endDateOil;
    private javax.swing.JButton fetchBtn;
    private javax.swing.JLabel gdpCountry;
    private javax.swing.JTable gdpTable;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel loadDataLabel;
    private javax.swing.JLabel oilCountry;
    private javax.swing.JTable oilTable;
    private javax.swing.JPanel panel;
    private javax.swing.JProgressBar progBar;
    private javax.swing.JButton savetoDB;
    private javax.swing.JLabel startDateGdp;
    private javax.swing.JLabel startDateOil;
    // End of variables declaration//GEN-END:variables
}
